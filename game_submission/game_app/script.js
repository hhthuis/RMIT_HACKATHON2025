// ==================================
// L·∫•y ph·∫ßn t·ª≠ DOM
// ==================================
const menuScreen = document.getElementById('menu-screen');
const playScreen = document.getElementById('play-screen');
const gameOverScreen = document.getElementById('game-over-screen');
const notificationScreen = document.getElementById('notification-screen');

const startButton = document.getElementById('start-button');
const retryButton = document.getElementById('retry-button');

const scoreDisplay = document.getElementById('score');
const capacityDisplay = document.getElementById('capacity');
const missedDisplay = document.getElementById('missed-count');
const livesDisplay = document.getElementById('lives');

const finalScoreDisplay = document.getElementById('final-score');
const resultTitle = document.getElementById('result-title');
const resultMessage = document.getElementById('result-message');

const notificationScore = document.getElementById('notification-score');
const notificationMessage = document.getElementById('notification-message');

const gameWorld = document.getElementById('game-world');
const playerBoat = document.getElementById('player-boat');
const leftBank = document.getElementById('left-bank');
const rightBank = document.getElementById('right-bank');
const safeZoneLeft = document.getElementById('safe-zone-left');
const safeZoneRight = document.getElementById('safe-zone-right');

// ==================================
// Tr·∫°ng th√°i game
// ==================================
let score = 0;
let boatCapacity = 0;
let missedCount = 0;
let lives = 3;

let isGameOver = false;
let isPaused = false;

const MAX_CAPACITY = 3;
const MAX_MISSED = 3;

let playerPos = { x: 0, y: 0 };      // t√≠nh theo to·∫° ƒë·ªô n·ªôi b·ªô c·ªßa gameWorld
let playerSpeed = 0;                  // s·∫Ω set theo k√≠ch th∆∞·ªõc khung ƒë·ªÉ responsive
const keysPressed = Object.create(null);

let entities = [];                    // {type:'victim'|'obstacle', x,y,speed, el}
let gameSpeed = 1.0;
let spawnRate = 1200;
let scoreToNextLevel = 10;
let obstacleChance = 0.4;

let rafId = null;
let spawnInterval = null;

const humaneMessages = [
  "L√≤ng t·ªët c·ªßa b·∫°n s∆∞·ªüi ·∫•m nh·ªØng tr√°i tim.",
  "H√†nh ƒë·ªông nh·ªè, √Ω nghƒ©a l·ªõn.",
  "S·ª± s·∫ª chia l√†m n√™n s·ª©c m·∫°nh c·ªông ƒë·ªìng.",
  "B·∫°n ƒëang vi·∫øt n√™n c√¢u chuy·ªán v·ªÅ t√¨nh ng∆∞·ªùi.",
  "Hy v·ªçng ƒë∆∞·ª£c th·∫Øp l√™n t·ª´ nh·ªØng chuy·∫øn ƒë√≤.",
  "Gi√∫p ƒë·ª° nhau v∆∞·ª£t qua kh√≥ khƒÉn!",
  "M·ªói ng∆∞·ªùi an to√†n l√† m·ªôt ni·ªÅm vui l·ªõn.",
];

// ==================================
// Ti·ªán √≠ch k√≠ch th∆∞·ªõc
// ==================================
function bounds() {
  return {
    w: gameWorld.clientWidth,
    h: gameWorld.clientHeight,
    bankW: leftBank.clientWidth,  // = rightBank.clientWidth
    boatW: playerBoat.clientWidth,
    boatH: playerBoat.clientHeight,
    entitySize: Math.max(1, Math.floor(gameWorld.clientWidth * 0.05)),
  };
}

// ==================================
// M√†n h√¨nh
// ==================================
function showScreen(screen) {
  [menuScreen, playScreen, gameOverScreen, notificationScreen]
    .forEach(s => s.classList.remove('active'));
  screen.classList.add('active');
}

// ==================================
// Kh·ªüi t·∫°o & reset
// ==================================
function startGame() {
  isGameOver = false;
  isPaused = false;
  score = 0;
  boatCapacity = 0;
  missedCount = 0;
  lives = 3;

  gameSpeed = 1.0;
  spawnRate = 1200;
  scoreToNextLevel = 10;
  obstacleChance = 0.4;

  // d·ªçn entity c≈©
  entities.forEach(e => e.el.remove());
  entities = [];

  // 1) show tr∆∞·ªõc ƒë·ªÉ ƒëo k√≠ch th∆∞·ªõc ch√≠nh x√°c
  showScreen(playScreen);

  // 2) ƒë·ª£i 1 frame r·ªìi set v·ªã tr√≠/tham s·ªë
  requestAnimationFrame(() => {
    const B = bounds();

    // GI·∫¢M T·ªêC THUY·ªÄN (√™m tay h∆°n)
    const sp = Math.round(B.w * 0.008);           // tr∆∞·ªõc l√† 0.012
    playerSpeed = Math.min(6, Math.max(3, sp));   // k·∫πp 3..6

    // ƒë·∫∑t gi·ªØa ƒë√°y
    playerPos.x = Math.round(B.w / 2 - B.boatW / 2);
    playerPos.y = Math.round(B.h - B.boatH - B.h * 0.02);

    drawPlayer();
    updateHUD();

    startLoops();
  });
}

function endGame(title, extraMsg) {
  isGameOver = true;
  stopLoops();

  resultTitle.textContent = title;
  let base = "";
  if (score < 10) base = "D√π kh√≥ khƒÉn, m·ªói n·ªó l·ª±c ƒë·ªÅu ƒë√°ng qu√Ω. H√£y ti·∫øp t·ª•c!";
  else if (score < 30) base = `B·∫°n ƒë√£ c·ª©u ƒë∆∞·ª£c ${score} ng∆∞·ªùi! Tinh th·∫ßn t∆∞∆°ng tr·ª£ c·ªßa b·∫°n th·∫≠t tuy·ªát.`;
  else base = `B·∫°n l√† ng∆∞·ªùi h√πng! ${score} ng∆∞·ªùi ƒë√£ an to√†n nh·ªù b·∫°n.`;

  resultMessage.textContent = extraMsg ? `${extraMsg} ${base}` : base;
  finalScoreDisplay.textContent = score;

  showScreen(gameOverScreen);
}

// ==================================
// V√≤ng l·∫∑p
// ==================================
function tick() {
  if (!isGameOver && !isPaused) {
    gameLoop();
  }
  rafId = requestAnimationFrame(tick);
}

function startLoops() {
  cancelAnimationFrame(rafId);
  clearInterval(spawnInterval);

  spawnInterval = setInterval(spawnEntity, spawnRate);
  rafId = requestAnimationFrame(tick);
}
function stopLoops() {
  cancelAnimationFrame(rafId);
  clearInterval(spawnInterval);
}

function gameLoop() {
  movePlayer();
  moveEntities();
  handleCollisions();
  drawPlayer();
}

// ==================================
// HUD & Feedback
// ==================================
function updateHUD() {
  scoreDisplay.textContent = score;
  capacityDisplay.textContent = `${boatCapacity} / ${MAX_CAPACITY}`;
  missedDisplay.textContent = `${missedCount} / ${MAX_MISSED}`;
  livesDisplay.textContent = lives;

  capacityDisplay.classList.toggle('full', boatCapacity >= MAX_CAPACITY);
  missedDisplay.classList.toggle('danger', missedCount > 0);
}

function showFeedbackText(text, color, x, y) {
  const el = document.createElement('div');
  el.className = 'feedback-text';
  el.textContent = text;
  el.style.color = color;
  el.style.left = `${x}px`;
  el.style.top = `${y}px`;
  gameWorld.appendChild(el);
  setTimeout(() => el.remove(), 1400);
}

// tƒÉng ƒë·ªô kh√≥
function increaseDifficulty() {
  gameSpeed += 0.12;
  spawnRate = Math.max(450, Math.floor(spawnRate * 0.9));
  obstacleChance = Math.min(0.72, obstacleChance + 0.05);

  clearInterval(spawnInterval);
  spawnInterval = setInterval(spawnEntity, spawnRate);

  showFeedbackText('NGUY HI·ªÇM H∆†N!', '#ff3b30', bounds().w / 2, bounds().h * 0.35);
}

// ==================================
// Di chuy·ªÉn & V·∫Ω
// ==================================
function movePlayer() {
  const B = bounds();
  let nx = playerPos.x;
  let ny = playerPos.y;

  if (keysPressed['arrowup'] || keysPressed['w']) ny -= playerSpeed;
  if (keysPressed['arrowdown'] || keysPressed['s']) ny += playerSpeed;
  if (keysPressed['arrowleft'] || keysPressed['a']) nx -= playerSpeed;
  if (keysPressed['arrowright'] || keysPressed['d']) nx += playerSpeed;

  // gi·ªõi h·∫°n trong s√¥ng
  const leftLimit = B.bankW;
  const rightLimit = B.w - B.bankW - B.boatW;

  if (ny < 0) ny = 0;
  if (ny > B.h - B.boatH) ny = B.h - B.boatH;
  if (nx < leftLimit) nx = leftLimit;
  if (nx > rightLimit) nx = rightLimit;

  playerPos.x = nx;
  playerPos.y = ny;
}

function drawPlayer() {
  playerBoat.style.transform = `translate(${playerPos.x}px, ${playerPos.y}px)`;
}

// ==================================
// Entities
// ==================================
function spawnEntity() {
  if (isGameOver || isPaused) return;

  const B = bounds();
  const isVictim = Math.random() > obstacleChance;

  const el = document.createElement('div');
  el.className = 'entity';
  const e = {
    type: isVictim ? 'victim' : 'obstacle',
    x: 0, y: 0,
    speed: 0,
    el
  };

  if (isVictim) {
    el.textContent = 'üßë‚Äçü§ù‚Äçüßë';
    e.speed = (2 + Math.random() * 2) * gameSpeed;
  } else {
    el.textContent = Math.random() > 0.5 ? 'ü™®' : 'üå≥';
    e.speed = (3 + Math.random() * 3) * gameSpeed;
  }

  // spawn trong l√≤ng s√¥ng gi·ªØa hai b·ªù
  const minX = B.bankW;
  const maxX = B.w - B.bankW - B.entitySize;
  e.x = Math.floor(minX + Math.random() * (maxX - minX));
  e.y = -B.entitySize;

  el.style.transform = `translate(${e.x}px, ${e.y}px)`;
  gameWorld.appendChild(el);
  entities.push(e);
}

function moveEntities() {
  const B = bounds();

  for (let i = entities.length - 1; i >= 0; i--) {
    const e = entities[i];
    e.y += e.speed;
    e.el.style.transform = `translate(${e.x}px, ${e.y}px)`;

    if (e.y > B.h) {
      e.el.remove();
      entities.splice(i, 1);
      if (e.type === 'victim') {
        missedCount++;
        updateHUD();
        if (missedCount >= MAX_MISSED) {
          endGame("Nhi·ªám v·ª• th·∫•t b·∫°i!", "B·∫°n ƒë√£ ƒë·ªÉ l·ª° qu√° nhi·ªÅu ng∆∞·ªùi.");
        }
      }
    }
  }
}

// ==================================
// Va ch·∫°m
// ==================================
function rectsOverlap(a, b) {
  return (
    a.x < b.x + b.w &&
    a.x + a.w > b.x &&
    a.y < b.y + b.h &&
    a.y + a.h > b.y
  );
}

function handleCollisions() {
  const B = bounds();
  const playerRect = { x: playerPos.x, y: playerPos.y, w: B.boatW, h: B.boatH };

  // Ch·∫°m cƒÉn c·ª© ‚Üí th·∫£ ng∆∞·ªùi
  const leftRect = {
    x: safeZoneLeft.offsetLeft, y: safeZoneLeft.offsetTop,
    w: safeZoneLeft.offsetWidth, h: safeZoneLeft.offsetHeight
  };
  const rightRect = {
    x: safeZoneRight.offsetLeft, y: safeZoneRight.offsetTop,
    w: safeZoneRight.offsetWidth, h: safeZoneRight.offsetHeight
  };

  const touchingBase = rectsOverlap(playerRect, leftRect) || rectsOverlap(playerRect, rightRect);
  if (boatCapacity > 0 && touchingBase) {
    const rescued = boatCapacity;
    score += rescued;
    boatCapacity = 0;
    updateHUD();

    const bx = touchingBase && rectsOverlap(playerRect, leftRect)
      ? leftRect.x + leftRect.w / 2
      : rightRect.x + rightRect.w / 2;
    const by = leftRect.y + 8;

    showFeedbackText(`+${rescued} an to√†n!`, '#2ecc71', bx, by);

    if (score >= scoreToNextLevel) {
      showNotification(); // ‚úÖ ƒë√£ s·ª≠a ƒë√∫ng h√†m
    }
  }

  // Ch·∫°m v·ªõi victim/obstacle
  for (let i = entities.length - 1; i >= 0; i--) {
    const e = entities[i];
    const eRect = { x: e.x, y: e.y, w: e.el.clientWidth, h: e.el.clientHeight };

    if (rectsOverlap(playerRect, eRect)) {
      if (e.type === 'victim') {
        if (boatCapacity < MAX_CAPACITY) {
          boatCapacity++;
          updateHUD();
          e.el.remove();
          entities.splice(i, 1);
          if (boatCapacity === MAX_CAPACITY) {
            showFeedbackText('ƒê√£ ƒë·∫ßy! V·ªÅ cƒÉn c·ª©!', '#ffcc00', playerRect.x, Math.max(8, playerRect.y - 12));
          }
        }
      } else { // obstacle
        // t√°ch m·∫°ng thuy·ªÅn kh·ªèi missed ng∆∞·ªùi
        lives--;
        updateHUD();
        e.el.remove();
        entities.splice(i, 1);

        gameWorld.classList.add('shake');
        setTimeout(() => gameWorld.classList.remove('shake'), 280);

        if (lives <= 0) {
          endGame("Nhi·ªám v·ª• th·∫•t b·∫°i!", "Thuy·ªÅn ƒë√£ h·ªèng do va ch·∫°m!");
          return;
        }
      }
    }
  }
}

// ==================================
// Notification & tƒÉng ƒë·ªô kh√≥
// ==================================
function showNotification() {
  isPaused = true;
  stopLoops();

  notificationScore.textContent = score;
  notificationMessage.textContent =
    humaneMessages[Math.floor(Math.random()*humaneMessages.length)];

  // m·ªëc ti·∫øp theo
  scoreToNextLevel += 10;

  showScreen(notificationScreen);

  setTimeout(() => {
    if (isGameOver) return;
    isPaused = false;
    showScreen(playScreen);
    increaseDifficulty();
    startLoops();
    updateHUD();
  }, 2600);
}

// ==================================
// Input
// ==================================
window.addEventListener('keydown', (e) => {
  keysPressed[e.key.toLowerCase()] = true;
});
window.addEventListener('keyup', (e) => {
  keysPressed[e.key.toLowerCase()] = false;
});

document.addEventListener('DOMContentLoaded', () => {
  startButton.addEventListener('click', startGame);
  retryButton.addEventListener('click', startGame);
  showScreen(menuScreen);
});
