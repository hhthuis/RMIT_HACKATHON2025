// ==================================
// L·∫•y ph·∫ßn t·ª≠ DOM
// ==================================
const menuScreen = document.getElementById('menu-screen');
const playScreen = document.getElementById('play-screen');
const gameOverScreen = document.getElementById('game-over-screen');
const notificationScreen = document.getElementById('notification-screen');

const startButton = document.getElementById('start-button');
const retryButton = document.getElementById('retry-button');

const scoreDisplay = document.getElementById('score');
const capacityDisplay = document.getElementById('capacity');
const missedDisplay = document.getElementById('missed-count');
const livesDisplay = document.getElementById('lives');
const upgradeCostDisplay = document.getElementById('upgrade-cost'); // NEW

const finalScoreDisplay = document.getElementById('final-score');
const resultTitle = document.getElementById('result-title');
const resultMessage = document.getElementById('result-message');

const notificationScore = document.getElementById('notification-score');
const notificationMessage = document.getElementById('notification-message');

const gameWorld = document.getElementById('game-world');
const playerBoat = document.getElementById('player-boat');
const leftBank = document.getElementById('left-bank');
const rightBank = document.getElementById('right-bank');
const safeZoneLeft = document.getElementById('safe-zone-left');
const safeZoneRight = document.getElementById('safe-zone-right');

// ==================================
// Tr·∫°ng th√°i game
// ==================================
let score = 0;
let boatCapacity = 0;
let maxCapacity = 3;          // NEW: thay cho h·∫±ng s·ªë
let missedCount = 0;
let lives = 3;

let isGameOver = false;
let isPaused = false;

let playerPos = { x: 0, y: 0 };
let playerSpeed = 0;
const keysPressed = Object.create(null);

let entities = [];
let gameSpeed = 0.8;          // kh·ªüi ƒë·∫ßu ch·∫≠m
let spawnRate = 1500;         // kh·ªüi ƒë·∫ßu th∆∞a
let scoreToNextLevel = 10;
let obstacleChance = 0.35;

let upgradeCost = 5;          // NEW: gi√° n√¢ng ƒë·∫ßu ti√™n
let rafId = null;
let spawnInterval = null;

const humaneMessages = [
  "Th∆∞∆°ng ng∆∞·ªùi nh∆∞ th·ªÉ th∆∞∆°ng th√¢n.",
  "M·ªôt mi·∫øng khi ƒë√≥i b·∫±ng m·ªôt g√≥i khi no.",
  "Nhi·ªÖu ƒëi·ªÅu ph·ªß l·∫•y gi√° g∆∞∆°ng, ng∆∞·ªùi trong m·ªôt n∆∞·ªõc ph·∫£i th∆∞∆°ng nhau c√πng.",
  "B·∫ßu ∆°i th∆∞∆°ng l·∫•y b√≠ c√πng, tuy r·∫±ng kh√°c gi·ªëng nh∆∞ng chung m·ªôt gi√†n.",
  "C·ª©u m·ªôt m·∫°ng ng∆∞·ªùi h∆°n x√¢y b·∫£y t√≤a th√°p.",
  "Gi√∫p ƒë·ª° nhau v∆∞·ª£t qua kh√≥ khƒÉn!",
  "T·∫Øt l·ª≠a t·ªëi ƒë√®n c√≥ nhau.",
];
const BOAT_IMG   = 'assets/boat.jpeg';
const VICTIM_IMG = 'assets/victim.jpeg';
const OBSTACLE_IMGS = [
  'assets/wood.jpeg',
  'assets/wood1.jpeg',
  'assets/rock.jpeg'
];
// ==================================
function bounds() {
  return {
    w: gameWorld.clientWidth,
    h: gameWorld.clientHeight,
    bankW: leftBank.clientWidth,
    boatW: playerBoat.clientWidth,
    boatH: playerBoat.clientHeight,
    entitySize: Math.max(1, Math.floor(gameWorld.clientWidth * 0.05)),
  };
}

// ==================================
function showScreen(screen) {
  [menuScreen, playScreen, gameOverScreen, notificationScreen]
    .forEach(s => s.classList.remove('active'));
  screen.classList.add('active');
}

// ==================================
function startGame() {
  isGameOver = false;
  isPaused = false;

  score = 0;
  boatCapacity = 0;
  maxCapacity = 3;    // reset
  missedCount = 0;
  lives = 3;

  gameSpeed = 0.8;
  spawnRate = 1500;
  scoreToNextLevel = 10;
  obstacleChance = 0.35;

  upgradeCost = 5;    // reset chi ph√≠ n√¢ng

  entities.forEach(e => e.el.remove());
  entities = [];

  showScreen(playScreen);

  requestAnimationFrame(() => {
    const B = bounds();

    const sp = Math.round(B.w * 0.006);
    playerSpeed = Math.min(4.5, Math.max(2.5, sp));

    playerPos.x = Math.round(B.w / 2 - B.boatW / 2);
    playerPos.y = Math.round(B.h - B.boatH - B.h * 0.02);

    drawPlayer();
    updateHUD();
    startLoops();
  });
}

function endGame(title, extraMsg) {
  isGameOver = true;
  stopLoops();

  resultTitle.textContent = title;
  let base = "";
  if (score < 10) base = "D√π kh√≥ khƒÉn, m·ªói n·ªó l·ª±c ƒë·ªÅu ƒë√°ng qu√Ω. H√£y ti·∫øp t·ª•c!";
  else if (score < 30) base = `B·∫°n ƒë√£ c·ª©u ƒë∆∞·ª£c ${score} ng∆∞·ªùi! Tinh th·∫ßn t∆∞∆°ng tr·ª£ c·ªßa b·∫°n th·∫≠t tuy·ªát.`;
  else base = `B·∫°n l√† ng∆∞·ªùi h√πng! ${score} ng∆∞·ªùi ƒë√£ an to√†n nh·ªù b·∫°n.`;

  resultMessage.textContent = extraMsg ? `${extraMsg} ${base}` : base;
  finalScoreDisplay.textContent = score;
  showScreen(gameOverScreen);
}

// ==================================
function tick() {
  if (!isGameOver && !isPaused) gameLoop();
  rafId = requestAnimationFrame(tick);
}
function startLoops() {
  cancelAnimationFrame(rafId);
  clearInterval(spawnInterval);
  spawnInterval = setInterval(spawnEntity, spawnRate);
  rafId = requestAnimationFrame(tick);
}
function stopLoops() {
  cancelAnimationFrame(rafId);
  clearInterval(spawnInterval);
}
function gameLoop() {
  movePlayer();
  moveEntities();
  handleCollisions();
  drawPlayer();
}

// ==================================
function updateHUD() {
  scoreDisplay.textContent = score;
  capacityDisplay.textContent = `${boatCapacity} / ${maxCapacity}`; // NEW
  missedDisplay.textContent = `${missedCount} / 3`;
  livesDisplay.textContent = lives;
  upgradeCostDisplay.textContent = upgradeCost; // NEW

  capacityDisplay.classList.toggle('full', boatCapacity >= maxCapacity);
  missedDisplay.classList.toggle('danger', missedCount > 0);
}
function showFeedbackText(text, color, x, y) {
  const el = document.createElement('div');
  el.className = 'feedback-text';
  el.textContent = text;
  el.style.color = color;
  el.style.left = `${x}px`;
  el.style.top = `${y}px`;
  gameWorld.appendChild(el);
  setTimeout(() => el.remove(), 1400);
}

// tƒÉng ƒë·ªô kh√≥
function increaseDifficulty() {
  gameSpeed += 0.1;
  spawnRate = Math.max(600, Math.floor(spawnRate * 0.92));
  obstacleChance = Math.min(0.7, obstacleChance + 0.05);

  clearInterval(spawnInterval);
  spawnInterval = setInterval(spawnEntity, spawnRate);

  const B = bounds();
  showFeedbackText('NGUY HI·ªÇM H∆†N!', '#ff3b30', B.w / 2, B.h * 0.35);
}

// ==================================
function movePlayer() {
  const B = bounds();
  let nx = playerPos.x, ny = playerPos.y;

  if (keysPressed['arrowup'] || keysPressed['w']) ny -= playerSpeed;
  if (keysPressed['arrowdown'] || keysPressed['s']) ny += playerSpeed;
  if (keysPressed['arrowleft'] || keysPressed['a']) nx -= playerSpeed;
  if (keysPressed['arrowright'] || keysPressed['d']) nx += playerSpeed;

  const leftLimit = B.bankW;
  const rightLimit = B.w - B.bankW - B.boatW;

  if (ny < 0) ny = 0;
  if (ny > B.h - B.boatH) ny = B.h - B.boatH;
  if (nx < leftLimit) nx = leftLimit;
  if (nx > rightLimit) nx = rightLimit;

  playerPos.x = nx;
  playerPos.y = ny;
}
function drawPlayer() {
  playerBoat.style.transform = `translate(${playerPos.x}px, ${playerPos.y}px)`;
}

// ==================================
function spawnEntity() {
  if (isGameOver || isPaused) return;
  const B = bounds();
  const isVictim = Math.random() > obstacleChance;

  const el = document.createElement('div');
  el.className = 'entity';
  const e = { type: isVictim ? 'victim' : 'obstacle', x: 0, y: 0, speed: 0, el };

  if (isVictim) {
    el.textContent = 'üßç';
    e.speed = (1.5 + Math.random() * 1.5) * gameSpeed;
  } else {
    el.textContent = Math.random() > 0.5 ? 'ü™®' : 'üå≥';
    e.speed = (2.0 + Math.random() * 2.0) * gameSpeed;
  }

  const minX = B.bankW, maxX = B.w - B.bankW - B.entitySize;
  e.x = Math.floor(minX + Math.random() * (maxX - minX));
  e.y = -B.entitySize;

  el.style.transform = `translate(${e.x}px, ${e.y}px)`;
  gameWorld.appendChild(el);
  entities.push(e);
}

function moveEntities() {
  const B = bounds();
  for (let i = entities.length - 1; i >= 0; i--) {
    const e = entities[i];
    e.y += e.speed;
    e.el.style.transform = `translate(${e.x}px, ${e.y}px)`;
    if (e.y > B.h) {
      e.el.remove();
      entities.splice(i, 1);
      if (e.type === 'victim') {
        missedCount++;
        updateHUD();
        if (missedCount >= 3)
          endGame("Nhi·ªám v·ª• th·∫•t b·∫°i!", "B·∫°n ƒë√£ ƒë·ªÉ l·ª° qu√° nhi·ªÅu ng∆∞·ªùi.");
      }
    }
  }
}

// ==================================
function rectsOverlap(a, b) {
  return (a.x < b.x + b.w && a.x + a.w > b.x && a.y < b.y + b.h && a.y + a.h > b.y);
}

// N√¢ng c·∫•p s·ª©c ch·ª©a (Space): tr·ª´ ƒëi·ªÉm, +1 maxCapacity, tƒÉng gi√° +3
function tryUpgradeCapacity() {
  if (isGameOver || isPaused) return;
  if (score >= upgradeCost) {
    score -= upgradeCost;
    maxCapacity += 1;
    upgradeCost += 3;
    updateHUD();
    const B = bounds();
    showFeedbackText(`N√¢ng s·ª©c ch·ª©a: ${maxCapacity}`, '#00e676', B.w/2, B.h*0.2);
  } else {
    const B = bounds();
    showFeedbackText(`Kh√¥ng ƒë·ªß ƒëi·ªÉm (c·∫ßn ${upgradeCost})`, '#ff5252', B.w/2, B.h*0.2);
  }
}

function handleCollisions() {
  const B = bounds();
  const playerRect = { x: playerPos.x, y: playerPos.y, w: B.boatW, h: B.boatH };
  const leftIcon  = { x: safeZoneLeft.offsetLeft,  y: safeZoneLeft.offsetTop,  w: safeZoneLeft.offsetWidth,  h: safeZoneLeft.offsetHeight };
  const rightIcon = { x: safeZoneRight.offsetLeft, y: safeZoneRight.offsetTop, w: safeZoneRight.offsetWidth, h: safeZoneRight.offsetHeight };

  const extend = Math.round(B.bankW * 0.55);
  const leftHit  = { x: B.bankW, y: leftIcon.y, w: extend, h: leftIcon.h };
  const rightHit = { x: B.w - B.bankW - extend, y: rightIcon.y, w: extend, h: rightIcon.h };

  const touchLeft = rectsOverlap(playerRect, leftHit);
  const touchRight = rectsOverlap(playerRect, rightHit);

  if (boatCapacity > 0 && (touchLeft || touchRight)) {
    const rescued = boatCapacity;
    score += rescued;
    boatCapacity = 0;
    updateHUD();
    const bx = touchLeft ? (leftHit.x + leftHit.w / 2) : (rightHit.x + rightHit.w / 2);
    const by = (touchLeft ? leftIcon : rightIcon).y + 8;
    showFeedbackText(`+${rescued} an to√†n!`, '#2ecc71', bx, by);
    if (score >= scoreToNextLevel) showNotification();
  }

  for (let i = entities.length - 1; i >= 0; i--) {
    const e = entities[i];
    const eRect = { x: e.x, y: e.y, w: e.el.clientWidth, h: e.el.clientHeight };
    if (rectsOverlap(playerRect, eRect)) {
      if (e.type === 'victim') {
        if (boatCapacity < maxCapacity) { // d√πng maxCapacity
          boatCapacity++;
          updateHUD();
          e.el.remove(); entities.splice(i, 1);
          if (boatCapacity === maxCapacity)
            showFeedbackText('ƒê√£ ƒë·∫ßy! V·ªÅ cƒÉn c·ª©!', '#ffcc00', playerRect.x, Math.max(8, playerRect.y - 12));
        }
      } else {
        lives--; updateHUD();
        e.el.remove(); entities.splice(i, 1);
        gameWorld.classList.add('shake');
        setTimeout(() => gameWorld.classList.remove('shake'), 280);
        if (lives <= 0) {
          endGame("Nhi·ªám v·ª• th·∫•t b·∫°i!", "Thuy·ªÅn ƒë√£ h·ªèng do va ch·∫°m!");
          return;
        }
      }
    }
  }
}

// ==================================
function showNotification() {
  isPaused = true;
  stopLoops();
  notificationScore.textContent = score;
  notificationMessage.textContent =
    humaneMessages[Math.floor(Math.random()*humaneMessages.length)];
  scoreToNextLevel += 10;
  showScreen(notificationScreen);
  setTimeout(() => {
    if (isGameOver) return;
    isPaused = false;
    showScreen(playScreen);
    increaseDifficulty();
    startLoops();
    updateHUD();
  }, 2600);
}

// ==================================
window.addEventListener('keydown', (e) => {
  const k = e.key.toLowerCase();
  if (k === ' ') { e.preventDefault(); tryUpgradeCapacity(); return; }    // NEW: Space
  if (k === 'spacebar') { e.preventDefault(); tryUpgradeCapacity(); return; } // IE legacy
  keysPressed[k] = true;
});
window.addEventListener('keyup', (e) => {
  keysPressed[e.key.toLowerCase()] = false;
});
document.addEventListener('DOMContentLoaded', () => {
  startButton.addEventListener('click', startGame);
  retryButton.addEventListener('click', startGame);
  showScreen(menuScreen);
});
